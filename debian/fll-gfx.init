#!/bin/sh
#set -x
### BEGIN INIT INFO
# Provides:          fll-gfx
# Required-Start:    $local_fs
# Required-Stop:     $remote_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 6
# Short-Description: Installs nvidia Kernel Module for new Kernels
### END INIT INFO

#
# Copyright (c) 2008, Andreas Weber <andreas@it-weber.com>
#

PATH=/sbin:/usr/sbin:/bin:/usr/bin
NAME="fll-gfx"
DESC="Installs nvidia Kernel Module for new Kernels"
CFG="/etc/default/fll-gfx"

. /lib/lsb/init-functions

getCfg()
{
	local KEY=$1
	local r1=$(grep ${KEY} ${CFG} | cut -d '=' -f2)
	cfgreturn="${r1}"
}

showDisclaimer()
{
cat \
<<EOF
-----------
DISCLAIMER:
-----------

This Script will install non-free Drivers for Nvidia and ATI GFX Cards.
Please read there License Agreement before you use this Script.

This Script will use the contrib and non-free Repositorys
from Debian and Sidux to install the Drivers.

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this package; if not, write to the Free Software 
Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, 
MA 02110-1301, USA.

On Debian GNU/Linux systems, the text of the GPL license can be
found in /usr/share/common-licenses/GPL.

Use this Script at your own Risk!

EOF
echo "Do you agree (y/n)?"
read AGREE
if [ ! "${AGREE}" = "y" ]; then
	echo "Aborting."
	exit 1
fi
grep "DISCLAIMER" ${CFG} || echo "\nDISCLAIMER=1" >> ${CFG}
sed -i -r 's|^\s*DISCLAIMER\s*\=\s*.*|DISCLAIMER\=1|' ${CFG}
}

detect()
{
	BUSID=$(lspci -nn | grep 'VGA' | cut -d ' ' -f 1)
	CARDID=$(lspci -n | grep "${BUSID}" | cut -d ' ' -f3 | cut -d ':' -f2)
	CARDBRAND=$(lspci -n | grep "${BUSID}" | cut -d ' ' -f3 | cut -d ':' -f1)

	case ${CARDBRAND} in
		10de|12d2)
			log_action_msg " * Detected a NVIDIA Card"
			MODULE="nvidia"
			XORGDRV="nvidia"
			predeb="nvidia-kernel-source"
			postdeb="nvidia-kernel-common	
				nvidia-glx
				nvidia-settings"
			local INSTALLED=$(dpkg-query -f '${Status}\n' -W "nvidia-kernel-$(uname -r)" | cut -d ' ' -f3 2>/dev/null)
			if [ ! "${ACTION}" = "force" ]; then
				case ${INSTALLED} in
					installed)
						log_action_msg " * nvidia-kernel-$(uname -r) already installed"
						exit 0
					;;
					not-installed)
					;;
				esac
			fi
			;;
		1002)
			log_action_msg " * Detected a ATI/AMD Card"
			MODULE="fglrx"
			XORGDRV="fglrx"
			predeb="fglrx-source"
			postdeb=""
			;;
		*)
			;;
	esac

	if [ -z "${MODULE}" ]; then
		log_failure_msg " * No NVIDIA or ATI/AMD Card found."
		exit 0
	fi

}

autoinstall()
{
	local query

	log_action_begin_msg " * Checking Apt Sources for contrib and non-free Section"
	grep "non-free" /etc/apt/sources.list.d/debian.list 1>/dev/null || wget -O /etc/apt/sources.list.d/debian.list http://sidux.com/files/misc/sources.list.d/debian.list 
	grep "contrib" /etc/apt/sources.list.d/debian.list 1>/dev/null ||  wget -O /etc/apt/sources.list.d/debian.list http://sidux.com/files/misc/sources.list.d/debian.list
	grep "non-free" /etc/apt/sources.list.d/sidux.list 1>/dev/null || wget -O /etc/apt/sources.list.d/sidux.list http://sidux.com/files/misc/sources.list.d/sidux.list
	grep "contrib" /etc/apt/sources.list.d/sidux.list 1>/dev/null || wget -O /etc/apt/sources.list.d/sidux.list http://sidux.com/files/misc/sources.list.d/sidux.list
	log_action_end_msg "0"
	
	log_action_begin_msg " * Running apt-get update"
	apt-get update >/dev/null 2>&1 
	if [ "$?" = "0" ]; then
		log_action_end_msg "0"
	else
		log_action_end_msg "1"
		exit 0
	fi

	log_action_begin_msg " * Checking Module Dependencies"
	DEPS=0
	for deb in ${predeb}; do
		query="$(dpkg-query -f '${Status}\n' -W ${deb} 2>/dev/null)"
		case "${query}" in
			*\ ok\ installed)
			;;
                        *)
				DEPS=1
				log_action_end_msg "0"
				log_action_begin_msg " * Installing ${deb}\n"
                        	apt-get -y install ${deb} >/dev/null 2>&1
				if [ "$?" = 0 ]; then
					log_action_end_msg "0"
				else
					log_action_end_msg "1"
					exit 0
				fi
			;;
		esac
	done
	if [ "$DEPS" = 0 ]; then
		log_action_end_msg "0"
	fi
	
	log_action_begin_msg " * Build and Install Module"
	m-a a-i -if -l "${KVER}" "${MODULE}" >/dev/null 2>&1
	case "$?" in
		0|249)
			log_action_end_msg "0"
		;;
		*)
			log_action_end_msg "1"
		;;
	esac

	log_action_msg " * Preinstallation Tasks"
	for deb in ${postdeb}; do 
		query="$(dpkg-query -f '${Status}\n' -W ${deb} 2>/dev/null)"
		case "${query}" in	
			*\ ok\ installed)
			;;       
		
			*)               
				log_action_begin_msg " * Install ${deb}"
				apt-get -y install ${deb} >/dev/null 2>&1
				if [ "$?" = 0 ]; then
					log_action_end_msg "0"
				else
				        log_action_end_msg "1"
				fi
			;;       
		esac
	done
	cp /etc/X11/xorg.conf /etc/X11/xorg.conf.fll-gfx.$(date -u +%Y%m%d%H%M)
	sed -i -r 's%^\s*Driver\s*"(ati|fbdev|fglrx|nv|nvidia|radeon|radeonhd|vesa|vga)"%\tDriver\t"'${XORGDRV}'"%' /etc/X11/xorg.conf
}

case "${1}" in
	start|build|force)
		ACTION=${1}
		KVER="$(uname -r)"

		log_action_msg "Starting ${NAME}"

		getCfg "DISCLAIMER"
		if [ ! "${cfgreturn}" = "1" ]; then
			showDisclaimer
		fi

		if [ ! -e /lib/modules/${KVER}/build ]; then
			log_failure_msg " * Failed to locate linux-headers-${KVER}..."
			exit 0
		fi
		detect
		autoinstall
		;;
	stop)
		find /var/run/${NAME} -delete
		;;
	restart|force-reload)
		echo "Error: argument '${1}' not supported" >&2
		exit 3
		;;
	test)
		# This method is just fpr testing purpose and will be removed later
		sed -i -r 's|^\s*DISCLAIMER\s*\=\s*.*|DISCLAIMER\=0|' ${CFG}
		;;
	*)
		echo "Usage: ${NAME} {start|stop|build|force}" >&2
		exit 3
		;;
esac

:
